/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import P1_T5_CapaOracle_FerrerMuñozCarles.ConnexioGeneral;
import P1_T5_Model_FerrerMuñozCarles.Punt;
import P1_T5_Model_FerrerMuñozCarles.Ruta;
import P1_T5_Model_FerrerMuñozCarles.WikilocException;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.sql.Timestamp;
import java.util.Date;
import javax.security.auth.callback.ConfirmationCallback;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.table.JTableHeader;

/**
 *
 * @author isard
 */
public class InfoRuta extends JFrame {

    private ConnexioGeneral gBD = null;
    private Ruta ruta;
    private DefaultTableModel tInfoRuta;
    private List<Punt> punts = new ArrayList<>();
    private String mUser;
    private JTableHeader header;
    private char optionRuta;
    /**
     * Creates new form InfoRuta
     */
    public InfoRuta() {
        initComponents();
    }
    
    public InfoRuta(ConnexioGeneral gbd, Ruta rut, char option, String user){
        initComponents();
        mUser = user;
        gBD = gbd;
        ruta = rut;
        initTextsDouble();
        initColumns();
        optionRuta = option;
        if (ruta!=null){
            punts = gBD.obtenirPunts(ruta);
            ruta.setPunts(punts);
            initTable();
            initTexts();
        }
        setExtendedState(MAXIMIZED_BOTH);
        header = jTable1.getTableHeader();
        header.addMouseListener(new InfoRuta.ColumnHeaderClickListerner(jTable1));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDescripció = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        txtDistancia = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTemps = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDesnPos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDesnNeg = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAfegir = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        cboDificultat = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Informació ruta");

        jLabel1.setText("Nom:");

        jLabel2.setText("Descripció:");

        jLabel3.setText("Text:");

        textAreaText.setColumns(20);
        textAreaText.setRows(5);
        jScrollPane1.setViewportView(textAreaText);

        jLabel4.setText("Distància:");

        jLabel5.setText("Temps:");

        jLabel6.setText("Desnivell Positiu:");

        jLabel7.setText("Desnviell negatiu:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Punts"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 811;
        gridBagConstraints.ipady = 318;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(24, 11, 0, 11);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        btnAfegir.setText("Afegir");
        btnAfegir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAfegirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 94, 20, 0);
        jPanel1.add(btnAfegir, gridBagConstraints);

        btnEditar.setText("Editar");
        btnEditar.setEnabled(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 110, 20, 0);
        jPanel1.add(btnEditar, gridBagConstraints);

        btnImprimir.setText("Imprimir");
        btnImprimir.setToolTipText("Opció en desenvolupament. Temporalment desactivada.");
        btnImprimir.setEnabled(false);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 142, 20, 0);
        jPanel1.add(btnImprimir, gridBagConstraints);

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.setInheritsPopupMenu(true);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 122, 20, 0);
        jPanel1.add(btnEliminar, gridBagConstraints);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel·lar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cboDificultat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una dificultat", "1", "2", "3", "4", "5" }));
        cboDificultat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDificultatActionPerformed(evt);
            }
        });

        jLabel8.setText("Dificultat:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtDistancia, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(txtDesnPos))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(txtTemps, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel7)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(txtDesnNeg, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addComponent(jLabel8)
                                                .addGap(18, 18, 18)
                                                .addComponent(cboDificultat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(155, 155, 155))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(293, 293, 293)
                                .addComponent(btnCancel)
                                .addGap(87, 87, 87)
                                .addComponent(btnGuardar))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtDescripció, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDificultat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDescripció, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtTemps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(txtDesnPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtDesnNeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnGuardar))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        
        Boolean active = row !=-1;
        
        btnEliminar.setEnabled(active);
        btnEditar.setEnabled(active);
    }//GEN-LAST:event_jTable1MouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRow()!=-1){
            InfoPunt ip = new InfoPunt(gBD, punts.get(jTable1.getSelectedRow()),ruta, 'w', mUser, optionRuta);
            ip.setVisible(true);
            this.dispose();
        }
        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnAfegirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAfegirActionPerformed
        // TODO add your handling code here:
        InfoPunt ip = new InfoPunt(gBD, null, ruta, 'o', mUser, optionRuta);
        ip.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAfegirActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(rootPane, "Segur que vols cancel·lar?", "Cancel·lar", ConfirmationCallback.YES_NO_OPTION);
        if (res == JOptionPane.YES_OPTION){
            Rutes r = new Rutes(gBD, mUser);
            r.setVisible(true);
            this.dispose();
        }
        
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(this, "Estàs segur que vols guardar la Ruta?", "Guardar ruta", ConfirmationCallback.YES_NO_OPTION);{
            if (res == JOptionPane.YES_OPTION){
                int id = 0;
                int numpunts = 0;
                double val = 0;
                Timestamp ts = null;
                if (ruta != null){
                    id = ruta.getId();
                    numpunts = ruta.getNumPunts();
                    val = ruta.getNota_mitja_valoracio();
                    ts = ruta.getData_creacio();
                } else {
                    ts = new Timestamp(System.currentTimeMillis());
                }
                    try {
                        double distancia = Double.parseDouble(txtDistancia.getText());
                        double temps = Double.parseDouble(txtTemps.getText());
                        double desnpos = Double.parseDouble(txtDesnPos.getText());
                        double desnneg = Double.parseDouble(txtDesnNeg.getText());
                        int dif = cboDificultat.getSelectedIndex();
                        ruta = new Ruta(id,null,txtNom.getText(),textAreaText.getText(),distancia, temps,desnpos, desnneg, dif, numpunts,val,txtDescripció.getText(),mUser,ts);
                        
                    } catch (Exception ex){
                        
                        JOptionPane.showMessageDialog(rootPane, "Error en crear la ruta", "Error", 1);
                        return;
                    }
                if (id == 0){
                    try{
                        if (gBD.afegirRuta(ruta, mUser)){
                            JOptionPane.showMessageDialog(rootPane, "Ruta inserida", "Èxit", 1);
                            gBD.validateChanges();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Error en guardar la ruta", "Error", 1);
                        }
                    } catch (Exception ex){
                        JOptionPane.showMessageDialog(rootPane, "Error en guardar la ruta", "Error", 1);
                    }
                } else {
                    try{
                        if (gBD.actualitzarRuta(ruta)){
                            JOptionPane.showMessageDialog(rootPane, "Ruta actualitzada", "Èxit", 1);
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Error en guardar la ruta", "Error", 1);
                        }
                    } catch (Exception ex){
                        JOptionPane.showMessageDialog(rootPane, "Error en guardar la ruta", "Error", 1);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Procès cancel·lat", "Cancel·lat", 1);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRow()!=-1){
            int res = JOptionPane.showConfirmDialog(this, "Estàs segur que vols inserir el Punt?", "Inserir punt", ConfirmationCallback.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION){
                try {
                    if (gBD.eliminarPunt(punts.get(jTable1.getSelectedRow()))){
                        JOptionPane.showMessageDialog(rootPane, "Punt eliminat", "Èxit",0);
                        gBD.validateChanges();
                        punts.clear();
                        punts = gBD.obtenirPunts(ruta);
                        initTable();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Error eliminant el punt", "Error",0);
                    }
                } catch (WikilocException ex){
                    JOptionPane.showMessageDialog(this, "ex", "Error", 1);
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Error en eliminar punt", "Error", 1);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void cboDificultatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDificultatActionPerformed
        // TODO add your handling code here:
        btnGuardar.setEnabled(cboDificultat.getSelectedIndex()!=0);
    }//GEN-LAST:event_cboDificultatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InfoRuta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InfoRuta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InfoRuta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InfoRuta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InfoRuta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAfegir;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox<String> cboDificultat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea textAreaText;
    private javax.swing.JTextField txtDescripció;
    private javax.swing.JTextField txtDesnNeg;
    private javax.swing.JTextField txtDesnPos;
    private javax.swing.JTextField txtDistancia;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtTemps;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
        removeAllRows(tInfoRuta);
        for (Punt p : punts){
            tInfoRuta.addRow(new Object[]{p.getId(), p.getNom(), p.getDesc(), p.getLatitude(), p.getLongitude(), p.getAltitude()});
        }
        jTable1.addMouseListener(new MouseAdapter(){
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table =(JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                
                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                    InfoPunt ip = new InfoPunt(gBD, punts.get(row), ruta, 'r', mUser, optionRuta);
                    ip.setVisible(true);
                    InfoRuta.this.dispose();
                }
            }
        });
        
    }
    
    private void initTextsDouble(){
        txtDesnNeg.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                
            }
            
            private void validateText() {
                String inputValue = txtDesnNeg.getText();

                try {
                    // Attempt to parse the entered text as a double
                    double doubleValue = Double.parseDouble(inputValue);
                    // Valid double value, you can handle it as needed
                    txtDesnNeg.setForeground(Color.BLACK);
                    btnGuardar.setEnabled(true);
                } catch (NumberFormatException ex) {
                    // Handling the case where parsing fails
                    // Change text color or provide other feedback to indicate an error
                    txtDesnNeg.setForeground(Color.RED);
                    btnGuardar.setEnabled(false);
                }
            }
        });
        txtDesnPos.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                
            }
            
            private void validateText() {
                String inputValue = txtDesnPos.getText();

                try {
                    // Attempt to parse the entered text as a double
                    double doubleValue = Double.parseDouble(inputValue);
                    // Valid double value, you can handle it as needed
                    txtDesnPos.setForeground(Color.BLACK);
                    btnGuardar.setEnabled(true);
                } catch (NumberFormatException ex) {
                    // Handling the case where parsing fails
                    // Change text color or provide other feedback to indicate an error
                    txtDesnPos.setForeground(Color.RED);
                    btnGuardar.setEnabled(false);
                }
            }
        });
        txtDistancia.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                
            }
            
            private void validateText() {
                String inputValue = txtDistancia.getText();

                try {
                    // Attempt to parse the entered text as a double
                    double doubleValue = Double.parseDouble(inputValue);
                    // Valid double value, you can handle it as needed
                    txtDistancia.setForeground(Color.BLACK);
                    btnGuardar.setEnabled(true);
                } catch (NumberFormatException ex) {
                    // Handling the case where parsing fails
                    // Change text color or provide other feedback to indicate an error
                    txtDistancia.setForeground(Color.RED);
                    btnGuardar.setEnabled(false);
                }
            }
        });
        txtTemps.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateText();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                
            }
            
            private void validateText() {
                String inputValue = txtTemps.getText();

                try {
                    // Attempt to parse the entered text as a double
                    double doubleValue = Double.parseDouble(inputValue);
                    // Valid double value, you can handle it as needed
                    txtTemps.setForeground(Color.BLACK);
                    btnGuardar.setEnabled(true);
                } catch (NumberFormatException ex) {
                    // Handling the case where parsing fails
                    // Change text color or provide other feedback to indicate an error
                    txtTemps.setForeground(Color.RED);
                    btnGuardar.setEnabled(false);
                }
            }
        });
    }

    private void initTexts() {
        
        txtDescripció.setText(ruta.getDescription());
        txtNom.setText(ruta.getTitol());
        textAreaText.setText(ruta.getText());
        txtDistancia.setText(ruta.getDistancia()+"");
        txtTemps.setText(ruta.getDuracio()+"");
        txtDesnNeg.setText(ruta.getDesnivell_negatiu()+"");
        txtDesnPos.setText(ruta.getDesnivell_positiu()+"");
        cboDificultat.setSelectedIndex(ruta.getDificultat());
        switch (optionRuta){
            case 'r':
                initTextsBool(false);
                break;
            case 'w':
                initTextsBool(true);
                break;
        }
    }

    private void initTextsBool(boolean b) {
        txtNom.setEnabled(b);
        txtDescripció.setEnabled(b);
        textAreaText.setEnabled(b);
        txtTemps.setEnabled(b);
        txtDesnNeg.setEnabled(b);
        txtDesnPos.setEnabled(b);
        txtDistancia.setEnabled(b);
        cboDificultat.setEnabled(b);
        
    }

    private void initColumns() {
        tInfoRuta =new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        
        jTable1.setModel(tInfoRuta);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        tInfoRuta.addColumn("Número");
        tInfoRuta.addColumn("Nom");
        tInfoRuta.addColumn("Descripció");
        tInfoRuta.addColumn("Latitud");
        tInfoRuta.addColumn("Longitud");
        tInfoRuta.addColumn("Altitud");
    }
    
    private static void removeAllRows(DefaultTableModel model) {
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    private static class ColumnHeaderClickListerner extends MouseInputAdapter  {

        private final JTable table;
        public ColumnHeaderClickListerner(JTable table) {
            this.table = table;
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            int columnIndex = table.columnAtPoint(e.getPoint());
            
            // Add your logic here based on the column header click event
            switch (columnIndex){
                case 0:
                    break;
                case 1:
                    break;
            }
        }
        
    }
}
